import pandas as pd
import torch
import torch_geometric
from torch_geometric.data import Dataset, Data
import numpy as np
import os
from AndroidMalwareDetection.FCG.reversed import AndroGuard
import glob
from torch_geometric.data.makedirs import makedirs
from AndroidMalwareDetection.Feature.extract_feature.extract_feature import ExtractFeature
from gensim.models import word2vec


# edge_index_list = [
#     torch.tensor([[0, 1, 1, 2],
#                   [1, 0, 2, 1]], dtype=torch.long),
#     torch.tensor([[0, 1, 2, 3],
#                   [1, 2, 3, 0]], dtype=torch.long),
#     torch.tensor([[0, 1, 2, 3],
#                   [1, 2, 3, 0]], dtype=torch.long)
# ]

# x_list = [
#     [1,2],
#     [3,4],
#     [5,6]
# ]


class GraphData():
     def __init__(self,x,edge_index):
      self.x = x
      self.edge_index = edge_index


class GraphDataset(Dataset):
    def __init__(self, root, transform=None, pre_transform=None, graph_data = [],label = 1):
        """
        root = Where the dataset should be stored. This folder is split
        into raw_dir (downloaded dataset) and processed_dir (processed data).
        """
        self.label = label
        self.graph_data = graph_data
        processed_dir = os.path.join(root, "processed")
        makedirs(processed_dir)
        self.len_data = len(glob.glob(os.path.join(processed_dir, 'data_graph*.pt')))
        super(GraphDataset, self).__init__(root, transform, pre_transform)

    @property
    def raw_file_names(self):
        return ''

    def download(self):
        pass

    @property
    def processed_file_names(self):
        return self.filename

    def process(self):
      for index, g in enumerate(self.graph_data):
        print(g.x,g.edge_index)
        data = Data(x=g.x,
                    edge_index=g.edge_index,
                    y=self.label)
        torch.save(data,
                   os.path.join(self.processed_dir,
                                f'data_graph{index}.pt'))
      self.len_data = len(glob.glob(os.path.join(self.processed_dir, 'data_graph*.pt')))


    def len(self):
        return self.len_data

    def get(self, idx):
        data = torch.load(os.path.join(self.processed_dir,
                                 f'data_graph{idx}.pt'))
        return data

