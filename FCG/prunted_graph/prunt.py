from androguard.core.bytecode import FormatClassToJava
from androguard.misc import AnalyzeAPK
import networkx as nx
import re
import matplotlib.pyplot as plt


def draw_graph(graph):
    pos = nx.spring_layout(graph)
    nx.draw_networkx_nodes(graph, pos, node_size=700)
    nx.draw_networkx_edges(graph, pos, width=2)
    nx.draw_networkx_labels(graph, pos, font_size=20, font_family="sans-serif")
    plt.show()


def pruneGraph(cg: nx.MultiDiGraph, list_node):
    sv = set()
    sav = set()
    sdv = set()
    for node in cg.nodes():
        if node in list_node:
            sv.add(node)
    for svi in sv:
        add_ancestors(svi, sav, cg)
    print(sav)
    for savi in sav:
        add_descendants(savi, sdv, cg)
    print(sdv)
    prunedGraph = obtain_pruned_graph(cg, sdv, sav)
    return prunedGraph


def add_ancestors(svi, sav, cg):
    listAncestor = list(cg.predecessors(svi))
    if listAncestor:
        for pre in listAncestor:
            if pre not in sav:
                sav.add(pre)
                add_ancestors(pre, sav, cg)


def add_descendants(svi, sdv, cg):
    listDescendants = list(cg.successors(svi))
    if listDescendants:
        for des in listDescendants:
            if des not in sdv:
                sdv.add(des)
                add_descendants(des, sdv, cg)


def obtain_pruned_graph(fcg, sdv, sav):
    pruned_fcg = nx.MultiDiGraph()
    for node in fcg.nodes:
        if node in sdv or node in sav:
            pruned_fcg.add_node(node)

    for edge in fcg.edges:
        source = edge[0]
        target = edge[1]
        if source in sav and target in sdv:
            pruned_fcg.add_edge(source, target)
    return pruned_fcg

# if __name__ == '__main__':

# G = nx.MultiDiGraph()
#
# G.add_edges_from(
#     [(1, 2), (1, 3), (1, 4), (1, 5), (2, 6), (2, 7), (2, 8), (4, 8), (4, 9), (4, 10), (11, 12), (11, 13), (11, 14),
#      (12, 10), (13, 10), (14, 15), (14, 16), (14, 17)])
# draw_graph(G)
#
# sensitive_api = [8]
# draw_graph(pruneGraph(G, sensitive_api))

# a,d,dx = AnalyzeAPK('C:\\Users\\DELL\\PycharmProjects\\AndroidMalwareDetection\\test2.apk')
# call_graph = dx.get_call_graph()
# lsnode = []
# for meth, perm in dx.get_permissions(a.get_effective_target_sdk_version()):
#     print("Using API method {} for permission {}".format(meth, perm))
#     print("used in:")
#     lsnode.append(meth)
#     for _, m, _ in meth.get_xref_from():
#         print(m.full_name)
# prune = pruneGraph(call_graph,lsnode)
# int_prunt = nx.convert_node_labels_to_integers(prune)
# int_call = nx.convert_node_labels_to_integers(call_graph)
# print(prune.number_of_nodes(), call_graph.number_of_nodes())
