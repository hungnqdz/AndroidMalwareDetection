from androguard.misc import AnalyzeAPK
import networkx as nx
import re
import matplotlib.pyplot as plt


# apk_file = "01E2E022A7147D36762D10ED396180EE7FD5334E2C17069BFFD0D07665A523AF.apk"
# a, d, dx = AnalyzeAPK(apk_file)


# sensitive_api = ['TelephonyManager', 'SmsManager', 'LocationManager', 'AudioManager', 'HttpURLConnection',
#                  'ConnectivityManager', 'BroadcastReceiver', 'Cipher', 'AccessibleObject', 'PackageManager']
#
#
# def analyzeExternalNode(cg: nx.MultiDiGraph):
#     sensitive_nodes = []
#     for node in cg.nodes():
#         for se in sensitive_api:
#             if node.is_external() and se in str(node.name):
#                 print(node.name)
#                 sensitive_nodes.append(node)
#
#
# FCG = dx.get_call_graph()
def draw_graph(graph):
    pos = nx.spring_layout(graph)
    nx.draw_networkx_nodes(graph, pos, node_size=700)
    nx.draw_networkx_edges(graph, pos, width=2)
    nx.draw_networkx_labels(graph, pos, font_size=20, font_family="sans-serif")
    plt.show()


def pruneGraph(cg: nx.MultiDiGraph, sensitive_api):
    sv = set()
    sav = set()
    sdv = set()
    for node in cg.nodes():
        if str(node) in sensitive_api:
            sv.add(node)
    for svi in sv:
        add_ancestors(svi, sav, cg)
    print(sav)
    for savi in sav:
        add_descendants(savi, sdv, cg)
    print(sdv)
    prunedGraph = obtain_pruned_graph(cg, sdv, sav)
    return prunedGraph


def add_ancestors(svi, sav, cg):
    listAncestor = list(cg.predecessors(svi))
    if listAncestor.__sizeof__() == 0:
        return
    for pre in listAncestor:
        sav.add(pre)
    for node in cg.predecessors(svi):
        add_ancestors(node, sav, cg)


def add_descendants(svi, sdv, cg):
    listDescendants = list(cg.successors(svi))
    if listDescendants.__sizeof__() == 0:
        return
    for des in listDescendants:
        sdv.add(des)
    for node in cg.successors(svi):
        add_descendants(node, sdv, cg)


def obtain_pruned_graph(fcg, sdv, sav):
    pruned_fcg = nx.MultiDiGraph()
    for node in fcg.nodes:
        if node in sdv or node in sav:
            pruned_fcg.add_node(node)

    for edge in fcg.edges:
        source = edge[0]
        target = edge[1]
        if source in sav and target in sdv:
            pruned_fcg.add_edge(source, target)
    return pruned_fcg


if __name__ == '__main__':
    # analyzeExternalNode(dx.get_call_graph())
    G = nx.MultiDiGraph()
    G.add_edges_from(
        [(1, 2), (1, 3), (1, 4), (1, 5), (2, 6), (2, 7), (2, 8), (4, 8), (4, 9), (4, 10), (11, 12), (11, 13), (11, 14),
         (12, 10), (13, 10), (14, 15), (14, 16), (14, 17)])
    draw_graph(G)

    sensitive_api = ['8']
    draw_graph(pruneGraph(G, sensitive_api))
