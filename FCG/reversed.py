# -*- coding: utf-8 -*-
"""Reversed

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a-kabTL9Dy0Pk7WhN82P31_PmAcxWIQy
"""

import argparse
from pathlib import Path

from androguard.misc import AnalyzeAPK
import matplotlib.pyplot as plt
import networkx as nx

class AndroGuard:
  def __init__(self, path_apk):
        self.a, self.d, self.dx = AnalyzeAPK(path_apk)
        self.cg = self.dx.get_call_graph()

  def plot_call_graph(self):
    layout = nx.drawing.nx_agraph.graphviz_layout(self.cg, prog='dot')
    labels, cm = {}, []
    legend = ''
    self.node_list = []
    for i, node in enumerate(nx.topological_sort(self.cg)):
        self.node_list.append(node)
        labels[node] = i
        cm.append('yellow' if node.is_external() else 'blue')
        legend += '%d, \\texttt{%s %s}\n' % (i, node.class_name.replace('$', '\\$'), node.name)
    plt.axis('off')
    nx.draw_networkx(self.cg, pos=layout, nodelist=self.node_list, node_color=cm, labels=labels, alpha=0.6, node_size=500,
                     font_family='serif')
    with open("cg.table", "w") as f:
        f.write(legend)
    plt.tight_layout()
    plt.savefig("cg.pdf", dpi=300, bbox_inches="tight")
    plt.show()

  def write_src (self):
    method_src = ''
    for node in self.cg.nodes():
        method = node.get_method()
        try:
            if not node.is_external():
                source_code = method.get_source()
                method_src += '%s %s\n' % (method.name, source_code)
                print("Writing method %s =================> cg.method_src" % method.name)
        except:
            print('cannot open source of method %s' % method.name)
            continue
    with open("cg.method_src", "w") as f:
        f.write(method_src)
        print("Finished writing method_src")

  def get_list_node(self):
    return self.node_list

