import argparse
import torch
from gensim.models import word2vec

from Feature.extract_feature.extract_feature import ExtractFeature
from GCN.GCN_init import GCN
import joblib
import numpy as np


def main():
    parser = argparse.ArgumentParser(description='Malware prediction')
    parser.add_argument('path', type=str, help='path apk')
    args = parser.parse_args()
    path = args.path
    api2vec = word2vec.Word2Vec.load('Feature/word2vec/api2vec.model')
    opcode2vec = word2vec.Word2Vec.load('Feature/word2vec/opcode.model')
    extract_feature = ExtractFeature(path_apk=path, api2vec=api2vec, opcode2vec=opcode2vec)
    model_gcn = GCN()
    model_gcn.load_state_dict(torch.load('GCN/GCN'))
    model_gcn.eval()
    data = extract_feature.to_data(-1)
    embedding, out = model_gcn(data.x.float(), data.edge_index.to(torch.int64), data.batch)
    # rf_model = joblib.load('Random_Forest/random_forest_model.model')
    # print(out.argmax(1),rf_model.predict(embedding.detach().numpy()))
    # print(df.iloc[2][-1],rf_model.predict([df.iloc[2][:-1]]))
    print('Malware' if(out.argmax(dim=1)[0] == 1) else 'Benign')


if __name__ == '__main__':
    main()
